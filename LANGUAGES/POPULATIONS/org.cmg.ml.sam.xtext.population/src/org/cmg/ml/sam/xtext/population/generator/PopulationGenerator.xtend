/*
 * generated by Xtext
 */
package org.cmg.ml.sam.xtext.population.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.cmg.ml.sam.xtext.population.population.Model
import javax.inject.Inject
import org.cmg.ml.sam.SamProjectHelper

class PopulationGenerator implements IGenerator {
	
	@Inject
	PopulationToJavaCompiler compiler;
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for( m: resource.allContents.toIterable.filter(typeof(Model)) ) {
			println(resource.URI)
			print("Is relative: ")
			println(resource.URI.relative)
			print("Is file: ")
			println(resource.URI.file)
			print("Is hierarchical: ")
			println(resource.URI.hierarchical)
			print("Path: ")
			println(resource.URI.path)
			print("Is platform: ")
			println(resource.URI.platform)
			print("To platform (true): ")
			println(resource.URI.toPlatformString(true))
			print("To platform (false): ")
			println(resource.URI.toPlatformString(false))
			print("Package folder: ")
			println(SamProjectHelper.getPackageFolder(resource))
			fsa.generateFile(
				SamProjectHelper.getPackageFolder(resource)+"/"+SamProjectHelper.getClassName(resource)+".java",
				compiler.compile(
					SamProjectHelper.getPackageFolder(resource).replace('/','.'),
					SamProjectHelper.getClassName(resource),
					m
				)
			);
		}
	}
}
