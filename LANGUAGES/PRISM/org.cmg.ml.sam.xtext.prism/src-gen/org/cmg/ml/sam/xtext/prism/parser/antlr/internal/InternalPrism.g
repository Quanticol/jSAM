/*
 * generated by Xtext
 */
grammar InternalPrism;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.cmg.ml.sam.xtext.prism.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.cmg.ml.sam.xtext.prism.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.cmg.ml.sam.xtext.prism.services.PrismGrammarAccess;

}

@parser::members {

 	private PrismGrammarAccess grammarAccess;
 	
    public InternalPrismParser(TokenStream input, PrismGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected PrismGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTypeModelTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleModelType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.ModelType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getElementsElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Element");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	 iv_ruleElement=ruleElement 
	 { $current=$iv_ruleElement.current; } 
	 EOF 
;

// Rule Element
ruleElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementAccess().getModuleParserRuleCall_0()); 
    }
    this_Module_0=ruleModule
    { 
        $current = $this_Module_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getGlobalParserRuleCall_1()); 
    }
    this_Global_1=ruleGlobal
    { 
        $current = $this_Global_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getConstantParserRuleCall_2()); 
    }
    this_Constant_2=ruleConstant
    { 
        $current = $this_Constant_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getRewardParserRuleCall_3()); 
    }
    this_Reward_3=ruleReward
    { 
        $current = $this_Reward_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getInitPredicateParserRuleCall_4()); 
    }
    this_InitPredicate_4=ruleInitPredicate
    { 
        $current = $this_InitPredicate_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getFormulaParserRuleCall_5()); 
    }
    this_Formula_5=ruleFormula
    { 
        $current = $this_Formula_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getLabelParserRuleCall_6()); 
    }
    this_Label_6=ruleLabel
    { 
        $current = $this_Label_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getPrismSystemParserRuleCall_7()); 
    }
    this_PrismSystem_7=rulePrismSystem
    { 
        $current = $this_PrismSystem_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getPathFormulaDeclarationParserRuleCall_8()); 
    }
    this_PathFormulaDeclaration_8=rulePathFormulaDeclaration
    { 
        $current = $this_PathFormulaDeclaration_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementAccess().getStateFormulaDeclarationParserRuleCall_9()); 
    }
    this_StateFormulaDeclaration_9=ruleStateFormulaDeclaration
    { 
        $current = $this_StateFormulaDeclaration_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePathFormulaDeclaration
entryRulePathFormulaDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathFormulaDeclarationRule()); }
	 iv_rulePathFormulaDeclaration=rulePathFormulaDeclaration 
	 { $current=$iv_rulePathFormulaDeclaration.current; } 
	 EOF 
;

// Rule PathFormulaDeclaration
rulePathFormulaDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pathformula' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPathFormulaDeclarationAccess().getPathformulaKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPathFormulaDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPathFormulaDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPathFormulaDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPathFormulaDeclarationAccess().getFormulaPathFormulaParserRuleCall_3_0()); 
	    }
		lv_formula_3_0=rulePathFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPathFormulaDeclarationRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.PathFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPathFormulaDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleStateFormulaDeclaration
entryRuleStateFormulaDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateFormulaDeclarationRule()); }
	 iv_ruleStateFormulaDeclaration=ruleStateFormulaDeclaration 
	 { $current=$iv_ruleStateFormulaDeclaration.current; } 
	 EOF 
;

// Rule StateFormulaDeclaration
ruleStateFormulaDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='stateformula' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateFormulaDeclarationAccess().getStateformulaKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStateFormulaDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateFormulaDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateFormulaDeclarationAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateFormulaDeclarationAccess().getFormulaStateFormulaParserRuleCall_3_0()); 
	    }
		lv_formula_3_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateFormulaDeclarationRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateFormulaDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRulePathFormula
entryRulePathFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPathFormulaRule()); }
	 iv_rulePathFormula=rulePathFormula 
	 { $current=$iv_rulePathFormula.current; } 
	 EOF 
;

// Rule PathFormula
rulePathFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPathFormulaAccess().getNextFormulaParserRuleCall_0()); 
    }
    this_NextFormula_0=ruleNextFormula
    { 
        $current = $this_NextFormula_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPathFormulaAccess().getUntilFormulaParserRuleCall_1()); 
    }
    this_UntilFormula_1=ruleUntilFormula
    { 
        $current = $this_UntilFormula_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUntilFormula
entryRuleUntilFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUntilFormulaRule()); }
	 iv_ruleUntilFormula=ruleUntilFormula 
	 { $current=$iv_ruleUntilFormula.current; } 
	 EOF 
;

// Rule UntilFormula
ruleUntilFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUntilFormulaAccess().getLeftStateFormulaParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUntilFormulaRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='\\U' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUntilFormulaAccess().getUKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUntilFormulaAccess().getBoundBoundParserRuleCall_2_0()); 
	    }
		lv_bound_2_0=ruleBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUntilFormulaRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Bound");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUntilFormulaAccess().getRightStateFormulaParserRuleCall_3_0()); 
	    }
		lv_right_3_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUntilFormulaRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBound
entryRuleBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundRule()); }
	 iv_ruleBound=ruleBound 
	 { $current=$iv_ruleBound.current; } 
	 EOF 
;

// Rule Bound
ruleBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBoundAccess().getRelopRelationsEnumRuleCall_0_0()); 
	    }
		lv_relop_0_0=ruleRelations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoundRule());
	        }
       		set(
       			$current, 
       			"relop",
        		lv_relop_0_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Relations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_limit_1_0=RULE_INT
		{
			newLeafNode(lv_limit_1_0, grammarAccess.getBoundAccess().getLimitINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoundRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"limit",
        		lv_limit_1_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
))
;





// Entry rule entryRuleNextFormula
entryRuleNextFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNextFormulaRule()); }
	 iv_ruleNextFormula=ruleNextFormula 
	 { $current=$iv_ruleNextFormula.current; } 
	 EOF 
;

// Rule NextFormula
ruleNextFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='\\X' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNextFormulaAccess().getXKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNextFormulaAccess().getArgStateFormulaParserRuleCall_1_0()); 
	    }
		lv_arg_1_0=ruleStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNextFormulaRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.StateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateFormula
entryRuleStateFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateFormulaRule()); }
	 iv_ruleStateFormula=ruleStateFormula 
	 { $current=$iv_ruleStateFormula.current; } 
	 EOF 
;

// Rule StateFormula
ruleStateFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStateFormulaAccess().getStateOrParserRuleCall()); 
    }
    this_StateOr_0=ruleStateOr
    { 
        $current = $this_StateOr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleStateOr
entryRuleStateOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateOrRule()); }
	 iv_ruleStateOr=ruleStateOr 
	 { $current=$iv_ruleStateOr.current; } 
	 EOF 
;

// Rule StateOr
ruleStateOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateOrAccess().getStateAndParserRuleCall_0()); 
    }
    this_StateAnd_0=ruleStateAnd
    { 
        $current = $this_StateAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStateOrAccess().getStateOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateOrAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateOrAccess().getRightStateOrParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleStateOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.StateOr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStateAnd
entryRuleStateAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateAndRule()); }
	 iv_ruleStateAnd=ruleStateAnd 
	 { $current=$iv_ruleStateAnd.current; } 
	 EOF 
;

// Rule StateAnd
ruleStateAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateAndAccess().getBaseStateFormulaParserRuleCall_0()); 
    }
    this_BaseStateFormula_0=ruleBaseStateFormula
    { 
        $current = $this_BaseStateFormula_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStateAndAccess().getStateAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateAndAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAndAccess().getRightStateAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleStateAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.StateAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBaseStateFormula
entryRuleBaseStateFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseStateFormulaRule()); }
	 iv_ruleBaseStateFormula=ruleBaseStateFormula 
	 { $current=$iv_ruleBaseStateFormula.current; } 
	 EOF 
;

// Rule BaseStateFormula
ruleBaseStateFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseStateFormulaAccess().getAtomicStateFormulaParserRuleCall_0()); 
    }
    this_AtomicStateFormula_0=ruleAtomicStateFormula
    { 
        $current = $this_AtomicStateFormula_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseStateFormulaAccess().getNegationFormulaParserRuleCall_1()); 
    }
    this_NegationFormula_1=ruleNegationFormula
    { 
        $current = $this_NegationFormula_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBaseStateFormulaAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getBaseStateFormulaAccess().getStateFormulaParserRuleCall_2_1()); 
    }
    this_StateFormula_3=ruleStateFormula
    { 
        $current = $this_StateFormula_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBaseStateFormulaAccess().getRightParenthesisKeyword_2_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBaseStateFormulaAccess().getProbabilityFormulaParserRuleCall_3()); 
    }
    this_ProbabilityFormula_5=ruleProbabilityFormula
    { 
        $current = $this_ProbabilityFormula_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProbabilityFormula
entryRuleProbabilityFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProbabilityFormulaRule()); }
	 iv_ruleProbabilityFormula=ruleProbabilityFormula 
	 { $current=$iv_ruleProbabilityFormula.current; } 
	 EOF 
;

// Rule ProbabilityFormula
ruleProbabilityFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='\\P' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProbabilityFormulaAccess().getPKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityFormulaAccess().getRelationRelationsEnumRuleCall_1_0()); 
	    }
		lv_relation_1_0=ruleRelations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityFormulaRule());
	        }
       		set(
       			$current, 
       			"relation",
        		lv_relation_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Relations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityFormulaAccess().getValueNumericalValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleNumericalValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityFormulaRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.NumericalValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProbabilityFormulaAccess().getLeftSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProbabilityFormulaAccess().getPathPathFormulaParserRuleCall_4_0()); 
	    }
		lv_path_4_0=rulePathFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProbabilityFormulaRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.PathFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProbabilityFormulaAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleNegationFormula
entryRuleNegationFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationFormulaRule()); }
	 iv_ruleNegationFormula=ruleNegationFormula 
	 { $current=$iv_ruleNegationFormula.current; } 
	 EOF 
;

// Rule NegationFormula
ruleNegationFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegationFormulaAccess().getExclamationMarkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationFormulaAccess().getArgumentBaseStateFormulaParserRuleCall_1_0()); 
	    }
		lv_argument_1_0=ruleBaseStateFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationFormulaRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.BaseStateFormula");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtomicStateFormula
entryRuleAtomicStateFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicStateFormulaRule()); }
	 iv_ruleAtomicStateFormula=ruleAtomicStateFormula 
	 { $current=$iv_ruleAtomicStateFormula.current; } 
	 EOF 
;

// Rule AtomicStateFormula
ruleAtomicStateFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtomicStateFormulaAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicStateFormulaAccess().getExpExpressionParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicStateFormulaRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomicStateFormulaAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRulePrismSystem
entryRulePrismSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrismSystemRule()); }
	 iv_rulePrismSystem=rulePrismSystem 
	 { $current=$iv_rulePrismSystem.current; } 
	 EOF 
;

// Rule PrismSystem
rulePrismSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrismSystemAccess().getSystemKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrismSystemAccess().getAlphabetisedParallelCompositionParserRuleCall_1()); 
    }
    this_AlphabetisedParallelComposition_1=ruleAlphabetisedParallelComposition
    { 
        $current = $this_AlphabetisedParallelComposition_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='endsystem' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrismSystemAccess().getEndsystemKeyword_2());
    }
)
;





// Entry rule entryRuleAlphabetisedParallelComposition
entryRuleAlphabetisedParallelComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAlphabetisedParallelCompositionRule()); }
	 iv_ruleAlphabetisedParallelComposition=ruleAlphabetisedParallelComposition 
	 { $current=$iv_ruleAlphabetisedParallelComposition.current; } 
	 EOF 
;

// Rule AlphabetisedParallelComposition
ruleAlphabetisedParallelComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAlphabetisedParallelCompositionAccess().getAsynchronousParallelCompositionParserRuleCall_0()); 
    }
    this_AsynchronousParallelComposition_0=ruleAsynchronousParallelComposition
    { 
        $current = $this_AsynchronousParallelComposition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAlphabetisedParallelCompositionAccess().getAlphabetisedParallelCompositionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAlphabetisedParallelCompositionAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAlphabetisedParallelCompositionAccess().getRightAlphabetisedParallelCompositionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAlphabetisedParallelComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAlphabetisedParallelCompositionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.AlphabetisedParallelComposition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAsynchronousParallelComposition
entryRuleAsynchronousParallelComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAsynchronousParallelCompositionRule()); }
	 iv_ruleAsynchronousParallelComposition=ruleAsynchronousParallelComposition 
	 { $current=$iv_ruleAsynchronousParallelComposition.current; } 
	 EOF 
;

// Rule AsynchronousParallelComposition
ruleAsynchronousParallelComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAsynchronousParallelCompositionAccess().getRestrictedParallelCompositionParserRuleCall_0()); 
    }
    this_RestrictedParallelComposition_0=ruleRestrictedParallelComposition
    { 
        $current = $this_RestrictedParallelComposition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAsynchronousParallelCompositionAccess().getAsynchronousParallelCompositionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAsynchronousParallelCompositionAccess().getVerticalLineVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAsynchronousParallelCompositionAccess().getRightAsynchronousParallelCompositionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAsynchronousParallelComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAsynchronousParallelCompositionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.AsynchronousParallelComposition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRestrictedParallelComposition
entryRuleRestrictedParallelComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRestrictedParallelCompositionRule()); }
	 iv_ruleRestrictedParallelComposition=ruleRestrictedParallelComposition 
	 { $current=$iv_ruleRestrictedParallelComposition.current; } 
	 EOF 
;

// Rule RestrictedParallelComposition
ruleRestrictedParallelComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRestrictedParallelCompositionAccess().getHidingParserRuleCall_0()); 
    }
    this_Hiding_0=ruleHiding
    { 
        $current = $this_Hiding_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRestrictedParallelCompositionAccess().getRestrictedParallelCompositionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRestrictedParallelCompositionAccess().getVerticalLineLeftSquareBracketKeyword_1_1());
    }
((
(
		lv_actions_3_0=RULE_ID
		{
			newLeafNode(lv_actions_3_0, grammarAccess.getRestrictedParallelCompositionAccess().getActionsIDTerminalRuleCall_1_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRestrictedParallelCompositionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"actions",
        		lv_actions_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRestrictedParallelCompositionAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		lv_actions_5_0=RULE_ID
		{
			newLeafNode(lv_actions_5_0, grammarAccess.getRestrictedParallelCompositionAccess().getActionsIDTerminalRuleCall_1_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRestrictedParallelCompositionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"actions",
        		lv_actions_5_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))*)?	otherlv_6='|]' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRestrictedParallelCompositionAccess().getVerticalLineRightSquareBracketKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRestrictedParallelCompositionAccess().getRightRestrictedParallelCompositionParserRuleCall_1_4_0()); 
	    }
		lv_right_7_0=ruleRestrictedParallelComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRestrictedParallelCompositionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.RestrictedParallelComposition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleHiding
entryRuleHiding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHidingRule()); }
	 iv_ruleHiding=ruleHiding 
	 { $current=$iv_ruleHiding.current; } 
	 EOF 
;

// Rule Hiding
ruleHiding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHidingAccess().getRenamingParserRuleCall_0()); 
    }
    this_Renaming_0=ruleRenaming
    { 
        $current = $this_Renaming_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getHidingAccess().getHidingArgumentAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHidingAccess().getSolidusKeyword_1_1());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHidingAccess().getLeftCurlyBracketKeyword_1_2());
    }
((
(
		lv_actions_4_0=RULE_ID
		{
			newLeafNode(lv_actions_4_0, grammarAccess.getHidingAccess().getActionsIDTerminalRuleCall_1_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHidingRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"actions",
        		lv_actions_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHidingAccess().getCommaKeyword_1_3_1_0());
    }
(
(
		lv_actions_6_0=RULE_ID
		{
			newLeafNode(lv_actions_6_0, grammarAccess.getHidingAccess().getActionsIDTerminalRuleCall_1_3_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHidingRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"actions",
        		lv_actions_6_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHidingAccess().getRightCurlyBracketKeyword_1_4());
    }
)?)
;





// Entry rule entryRuleRenaming
entryRuleRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRenamingRule()); }
	 iv_ruleRenaming=ruleRenaming 
	 { $current=$iv_ruleRenaming.current; } 
	 EOF 
;

// Rule Renaming
ruleRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRenamingAccess().getBaseModuleParserRuleCall_0()); 
    }
    this_BaseModule_0=ruleBaseModule
    { 
        $current = $this_BaseModule_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRenamingAccess().getRenamingArgumentAction_1_0(),
            $current);
    }
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRenamingAccess().getLeftCurlyBracketKeyword_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingActionRenamingParserRuleCall_1_2_0_0()); 
	    }
		lv_renaming_3_0=ruleActionRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renaming",
        		lv_renaming_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.ActionRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRenamingAccess().getCommaKeyword_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRenamingAccess().getRenamingActionRenamingParserRuleCall_1_2_1_1_0()); 
	    }
		lv_renaming_5_0=ruleActionRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRenamingRule());
	        }
       		add(
       			$current, 
       			"renaming",
        		lv_renaming_5_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.ActionRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRenamingAccess().getRightCurlyBracketKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleActionRenaming
entryRuleActionRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRenamingRule()); }
	 iv_ruleActionRenaming=ruleActionRenaming 
	 { $current=$iv_ruleActionRenaming.current; } 
	 EOF 
;

// Rule ActionRenaming
ruleActionRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_source_0_0=RULE_ID
		{
			newLeafNode(lv_source_0_0, grammarAccess.getActionRenamingAccess().getSourceIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRenamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='<-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActionRenamingAccess().getLessThanSignHyphenMinusKeyword_1());
    }
(
(
		lv_target_2_0=RULE_ID
		{
			newLeafNode(lv_target_2_0, grammarAccess.getActionRenamingAccess().getTargetIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRenamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleBaseModule
entryRuleBaseModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseModuleRule()); }
	 iv_ruleBaseModule=ruleBaseModule 
	 { $current=$iv_ruleBaseModule.current; } 
	 EOF 
;

// Rule BaseModule
ruleBaseModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseModuleAccess().getModuleReferenceParserRuleCall_0()); 
    }
    this_ModuleReference_0=ruleModuleReference
    { 
        $current = $this_ModuleReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBaseModuleAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getBaseModuleAccess().getAlphabetisedParallelCompositionParserRuleCall_1_1()); 
    }
    this_AlphabetisedParallelComposition_2=ruleAlphabetisedParallelComposition
    { 
        $current = $this_AlphabetisedParallelComposition_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBaseModuleAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleModuleReference
entryRuleModuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleReferenceRule()); }
	 iv_ruleModuleReference=ruleModuleReference 
	 { $current=$iv_ruleModuleReference.current; } 
	 EOF 
;

// Rule ModuleReference
ruleModuleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getModuleReferenceAccess().getModuleModuleCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleGlobal
entryRuleGlobal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalRule()); }
	 iv_ruleGlobal=ruleGlobal 
	 { $current=$iv_ruleGlobal.current; } 
	 EOF 
;

// Rule Global
ruleGlobal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='global' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalAccess().getGlobalKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getGlobalAccess().getVariableParserRuleCall_1()); 
    }
    this_Variable_1=ruleVariable
    { 
        $current = $this_Variable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='label' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getLabelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLabelAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.STRING");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLabelAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLabelAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabelRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLabelAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFormula
entryRuleFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	 iv_ruleFormula=ruleFormula 
	 { $current=$iv_ruleFormula.current; } 
	 EOF 
;

// Rule Formula
ruleFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='formula' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFormulaAccess().getFormulaKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFormulaAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFormulaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFormulaAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormulaAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormulaRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFormulaAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleInitPredicate
entryRuleInitPredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitPredicateRule()); }
	 iv_ruleInitPredicate=ruleInitPredicate 
	 { $current=$iv_ruleInitPredicate.current; } 
	 EOF 
;

// Rule InitPredicate
ruleInitPredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='init' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInitPredicateAccess().getInitKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitPredicateAccess().getPredicateExpressionParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitPredicateRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='endinit' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInitPredicateAccess().getEndinitKeyword_2());
    }
)
;





// Entry rule entryRuleReward
entryRuleReward returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRewardRule()); }
	 iv_ruleReward=ruleReward 
	 { $current=$iv_ruleReward.current; } 
	 EOF 
;

// Rule Reward
ruleReward returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRewardAccess().getRewardAction_0(),
            $current);
    }
)	otherlv_1='rewards' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRewardAccess().getRewardsKeyword_1());
    }
(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getRewardAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRewardRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.STRING");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRewardAccess().getCasesRewardCaseParserRuleCall_3_0()); 
	    }
		lv_cases_3_0=ruleRewardCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRewardRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.RewardCase");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='endrewards' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRewardAccess().getEndrewardsKeyword_4());
    }
)
;





// Entry rule entryRuleRewardCase
entryRuleRewardCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRewardCaseRule()); }
	 iv_ruleRewardCase=ruleRewardCase 
	 { $current=$iv_ruleRewardCase.current; } 
	 EOF 
;

// Rule RewardCase
ruleRewardCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRewardCaseAccess().getLeftSquareBracketKeyword_0_0());
    }
(
(
		lv_action_1_0=RULE_ID
		{
			newLeafNode(lv_action_1_0, grammarAccess.getRewardCaseAccess().getActionIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRewardCaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"action",
        		lv_action_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRewardCaseAccess().getRightSquareBracketKeyword_0_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRewardCaseAccess().getGuardExpressionParserRuleCall_1_0()); 
	    }
		lv_guard_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRewardCaseRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRewardCaseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRewardCaseAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRewardCaseRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRewardCaseAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getTypeConstantTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleConstantType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.ConstantType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getExpExpressionParserRuleCall_4_0()); 
	    }
		lv_exp_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstantAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getBodyModuleBodyParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleModuleBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.ModuleBody");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='endmodule' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getEndmoduleKeyword_3());
    }
)
;





// Entry rule entryRuleModuleBody
entryRuleModuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleBodyRule()); }
	 iv_ruleModuleBody=ruleModuleBody 
	 { $current=$iv_ruleModuleBody.current; } 
	 EOF 
;

// Rule ModuleBody
ruleModuleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModuleBodyAccess().getModuleBodyDeclarationParserRuleCall_0()); 
    }
    this_ModuleBodyDeclaration_0=ruleModuleBodyDeclaration
    { 
        $current = $this_ModuleBodyDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModuleBodyAccess().getVariableRenamingParserRuleCall_1()); 
    }
    this_VariableRenaming_1=ruleVariableRenaming
    { 
        $current = $this_VariableRenaming_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariableRenaming
entryRuleVariableRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRenamingRule()); }
	 iv_ruleVariableRenaming=ruleVariableRenaming 
	 { $current=$iv_ruleVariableRenaming.current; } 
	 EOF 
;

// Rule VariableRenaming
ruleVariableRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='=' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableRenamingAccess().getEqualsSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRenamingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableRenamingAccess().getModuleModuleCrossReference_1_0()); 
	}

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableRenamingAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableRenamingAccess().getRenamingSymbolRenamingParserRuleCall_3_0()); 
	    }
		lv_renaming_3_0=ruleSymbolRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRenamingRule());
	        }
       		add(
       			$current, 
       			"renaming",
        		lv_renaming_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.SymbolRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableRenamingAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableRenamingAccess().getRenamingSymbolRenamingParserRuleCall_4_1_0()); 
	    }
		lv_renaming_5_0=ruleSymbolRenaming		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRenamingRule());
	        }
       		add(
       			$current, 
       			"renaming",
        		lv_renaming_5_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.SymbolRenaming");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableRenamingAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSymbolRenaming
entryRuleSymbolRenaming returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbolRenamingRule()); }
	 iv_ruleSymbolRenaming=ruleSymbolRenaming 
	 { $current=$iv_ruleSymbolRenaming.current; } 
	 EOF 
;

// Rule SymbolRenaming
ruleSymbolRenaming returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_source_0_0=RULE_ID
		{
			newLeafNode(lv_source_0_0, grammarAccess.getSymbolRenamingAccess().getSourceIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSymbolRenamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSymbolRenamingAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_target_2_0=RULE_ID
		{
			newLeafNode(lv_target_2_0, grammarAccess.getSymbolRenamingAccess().getTargetIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSymbolRenamingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleModuleBodyDeclaration
entryRuleModuleBodyDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleBodyDeclarationRule()); }
	 iv_ruleModuleBodyDeclaration=ruleModuleBodyDeclaration 
	 { $current=$iv_ruleModuleBodyDeclaration.current; } 
	 EOF 
;

// Rule ModuleBodyDeclaration
ruleModuleBodyDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleBodyDeclarationAccess().getModuleBodyDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleBodyDeclarationAccess().getVariablesVariableParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleBodyDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleBodyDeclarationAccess().getCommandsCommandParserRuleCall_2_0()); 
	    }
		lv_commands_2_0=ruleCommand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleBodyDeclarationRule());
	        }
       		add(
       			$current, 
       			"commands",
        		lv_commands_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Command");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCommandAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_act_1_0=RULE_ID
		{
			newLeafNode(lv_act_1_0, grammarAccess.getCommandAccess().getActIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCommandRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"act",
        		lv_act_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)?	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommandAccess().getRightSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getGuardExpressionParserRuleCall_3_0()); 
	    }
		lv_guard_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCommandAccess().getHyphenMinusGreaterThanSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getUpdatesUpdateParserRuleCall_5_0()); 
	    }
		lv_updates_5_0=ruleUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		add(
       			$current, 
       			"updates",
        		lv_updates_5_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Update");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='+' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCommandAccess().getPlusSignKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommandAccess().getUpdatesUpdateParserRuleCall_6_1_0()); 
	    }
		lv_updates_7_0=ruleUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommandRule());
	        }
       		add(
       			$current, 
       			"updates",
        		lv_updates_7_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Update");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCommandAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleUpdate
entryRuleUpdate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateRule()); }
	 iv_ruleUpdate=ruleUpdate 
	 { $current=$iv_ruleUpdate.current; } 
	 EOF 
;

// Rule Update
ruleUpdate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAccess().getWeightExpressionParserRuleCall_0_0_0()); 
	    }
		lv_weight_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateRule());
	        }
       		set(
       			$current, 
       			"weight",
        		lv_weight_0_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAccess().getElementsUpdateElementParserRuleCall_1_0()); 
	    }
		lv_elements_2_0=ruleUpdateElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.UpdateElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='&' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdateAccess().getAmpersandKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAccess().getElementsUpdateElementParserRuleCall_2_1_0()); 
	    }
		lv_elements_4_0=ruleUpdateElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.UpdateElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUpdateElement
entryRuleUpdateElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateElementRule()); }
	 iv_ruleUpdateElement=ruleUpdateElement 
	 { $current=$iv_ruleUpdateElement.current; } 
	 EOF 
;

// Rule UpdateElement
ruleUpdateElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUpdateElementAccess().getLeftParenthesisKeyword_0());
    }
(
(
		lv_variable_1_0=RULE_NEXTID
		{
			newLeafNode(lv_variable_1_0, grammarAccess.getUpdateElementAccess().getVariableNEXTIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.NEXTID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateElementAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateElementAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateElementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUpdateElementAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='init' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getInitKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getInitExpressionParserRuleCall_3_1_0()); 
	    }
		lv_init_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBooleanTypeParserRuleCall_0()); 
    }
    this_BooleanType_0=ruleBooleanType
    { 
        $current = $this_BooleanType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getIntervalTypeParserRuleCall_1()); 
    }
    this_IntervalType_1=ruleIntervalType
    { 
        $current = $this_IntervalType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntervalType
entryRuleIntervalType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntervalTypeRule()); }
	 iv_ruleIntervalType=ruleIntervalType 
	 { $current=$iv_ruleIntervalType.current; } 
	 EOF 
;

// Rule IntervalType
ruleIntervalType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntervalTypeAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalTypeAccess().getMinExpressionParserRuleCall_1_0()); 
	    }
		lv_min_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalTypeRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_1_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_INTERVAL_2=RULE_INTERVAL
    { 
    newLeafNode(this_INTERVAL_2, grammarAccess.getIntervalTypeAccess().getINTERVALTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalTypeAccess().getMaxExpressionParserRuleCall_3_0()); 
	    }
		lv_max_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalTypeRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntervalTypeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBooleanType
entryRuleBooleanType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanTypeRule()); }
	 iv_ruleBooleanType=ruleBooleanType 
	 { $current=$iv_ruleBooleanType.current; } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0(),
            $current);
    }
)	otherlv_1='bool' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanTypeAccess().getBoolKeyword_1());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIfThenElseParserRuleCall()); 
    }
    this_IfThenElse_0=ruleIfThenElse
    { 
        $current = $this_IfThenElse_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	 iv_ruleIfThenElse=ruleIfThenElse 
	 { $current=$iv_ruleIfThenElse.current; } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIfThenElseAccess().getImpliesParserRuleCall_0()); 
    }
    this_Implies_0=ruleImplies
    { 
        $current = $this_Implies_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfThenElseAccess().getIfThenElseGuardAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfThenElseAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getThenCaseIfThenElseParserRuleCall_1_2_0()); 
	    }
		lv_thenCase_3_0=ruleIfThenElse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"thenCase",
        		lv_thenCase_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.IfThenElse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfThenElseAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getElseCaseImpliesParserRuleCall_1_4_0()); 
	    }
		lv_elseCase_5_0=ruleImplies		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"elseCase",
        		lv_elseCase_5_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Implies");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImplies
entryRuleImplies returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesRule()); }
	 iv_ruleImplies=ruleImplies 
	 { $current=$iv_ruleImplies.current; } 
	 EOF 
;

// Rule Implies
ruleImplies returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesAccess().getIfAndOnlyIfParserRuleCall_0()); 
    }
    this_IfAndOnlyIf_0=ruleIfAndOnlyIf
    { 
        $current = $this_IfAndOnlyIf_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesAccess().getImpliesLeftAction_1_0(),
            $current);
    }
)	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImpliesAccess().getEqualsSignGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesAccess().getRightIfAndOnlyIfParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleIfAndOnlyIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.IfAndOnlyIf");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIfAndOnlyIf
entryRuleIfAndOnlyIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfAndOnlyIfRule()); }
	 iv_ruleIfAndOnlyIf=ruleIfAndOnlyIf 
	 { $current=$iv_ruleIfAndOnlyIf.current; } 
	 EOF 
;

// Rule IfAndOnlyIf
ruleIfAndOnlyIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIfAndOnlyIfAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfAndOnlyIfAccess().getIfAndOnlyIfLeftAction_1_0(),
            $current);
    }
)	otherlv_2='<=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfAndOnlyIfAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAndOnlyIfAccess().getRightOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfAndOnlyIfRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpressionAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getNegationParserRuleCall_0()); 
    }
    this_Negation_0=ruleNegation
    { 
        $current = $this_Negation_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightNegationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNegation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Negation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNegation
entryRuleNegation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationRule()); }
	 iv_ruleNegation=ruleNegation 
	 { $current=$iv_ruleNegation.current; } 
	 EOF 
;

// Rule Negation
ruleNegation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegationAccess().getExclamationMarkKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegationAccess().getNegationAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationAccess().getArgNegationParserRuleCall_0_2_0()); 
	    }
		lv_arg_2_0=ruleNegation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Negation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNegationAccess().getRelExpressionParserRuleCall_1()); 
    }
    this_RelExpression_3=ruleRelExpression
    { 
        $current = $this_RelExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRelExpression
entryRuleRelExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelExpressionRule()); }
	 iv_ruleRelExpression=ruleRelExpression 
	 { $current=$iv_ruleRelExpression.current; } 
	 EOF 
;

// Rule RelExpression
ruleRelExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelExpressionAccess().getSumExpressionParserRuleCall_0()); 
    }
    this_SumExpression_0=ruleSumExpression
    { 
        $current = $this_SumExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelExpressionAccess().getRelExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelExpressionAccess().getRelopRelationsEnumRuleCall_1_1_0()); 
	    }
		lv_relop_2_0=ruleRelations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelExpressionRule());
	        }
       		set(
       			$current, 
       			"relop",
        		lv_relop_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Relations");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelExpressionAccess().getRightSumExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSumExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.SumExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSumExpression
entryRuleSumExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumExpressionRule()); }
	 iv_ruleSumExpression=ruleSumExpression 
	 { $current=$iv_ruleSumExpression.current; } 
	 EOF 
;

// Rule SumExpression
ruleSumExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSumExpressionAccess().getMulExpressionParserRuleCall_0()); 
    }
    this_MulExpression_0=ruleMulExpression
    { 
        $current = $this_MulExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getSumExpressionAccess().getSumExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getSumExpressionAccess().getOpPlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSumExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getSumExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSumExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSumExpressionAccess().getRightMulExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMulExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.MulExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMulExpression
entryRuleMulExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMulExpressionRule()); }
	 iv_ruleMulExpression=ruleMulExpression 
	 { $current=$iv_ruleMulExpression.current; } 
	 EOF 
;

// Rule MulExpression
ruleMulExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMulExpressionAccess().getBaseExpressionParserRuleCall_0()); 
    }
    this_BaseExpression_0=ruleBaseExpression
    { 
        $current = $this_BaseExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMulExpressionAccess().getMulExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMulExpressionAccess().getOpAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMulExpressionAccess().getOpSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMulExpressionAccess().getRightBaseExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleBaseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMulExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.BaseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBaseExpression
entryRuleBaseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseExpressionRule()); }
	 iv_ruleBaseExpression=ruleBaseExpression 
	 { $current=$iv_ruleBaseExpression.current; } 
	 EOF 
;

// Rule BaseExpression
ruleBaseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getNumericalValueParserRuleCall_0()); 
    }
    this_NumericalValue_0=ruleNumericalValue
    { 
        $current = $this_NumericalValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getReferenceParserRuleCall_1()); 
    }
    this_Reference_1=ruleReference
    { 
        $current = $this_Reference_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getTrueParserRuleCall_2()); 
    }
    this_True_2=ruleTrue
    { 
        $current = $this_True_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getFalseParserRuleCall_3()); 
    }
    this_False_3=ruleFalse
    { 
        $current = $this_False_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getExpressionParserRuleCall_4_1()); 
    }
    this_Expression_5=ruleExpression
    { 
        $current = $this_Expression_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBaseExpressionAccess().getRightParenthesisKeyword_4_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getMinFunctionParserRuleCall_5()); 
    }
    this_MinFunction_7=ruleMinFunction
    { 
        $current = $this_MinFunction_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getMaxFunctionParserRuleCall_6()); 
    }
    this_MaxFunction_8=ruleMaxFunction
    { 
        $current = $this_MaxFunction_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getPowFunctionParserRuleCall_7()); 
    }
    this_PowFunction_9=rulePowFunction
    { 
        $current = $this_PowFunction_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getFloorFunctionParserRuleCall_8()); 
    }
    this_FloorFunction_10=ruleFloorFunction
    { 
        $current = $this_FloorFunction_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getCeilFunctionParserRuleCall_9()); 
    }
    this_CeilFunction_11=ruleCeilFunction
    { 
        $current = $this_CeilFunction_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getModFunctionParserRuleCall_10()); 
    }
    this_ModFunction_12=ruleModFunction
    { 
        $current = $this_ModFunction_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBaseExpressionAccess().getLogFunctionParserRuleCall_11()); 
    }
    this_LogFunction_13=ruleLogFunction
    { 
        $current = $this_LogFunction_13.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLogFunction
entryRuleLogFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogFunctionRule()); }
	 iv_ruleLogFunction=ruleLogFunction 
	 { $current=$iv_ruleLogFunction.current; } 
	 EOF 
;

// Rule LogFunction
ruleLogFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='log' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogFunctionAccess().getLogKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLogFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogFunctionAccess().getArgumentExpressionParserRuleCall_2_0()); 
	    }
		lv_argument_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogFunctionRule());
	        }
       		set(
       			$current, 
       			"argument",
        		lv_argument_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLogFunctionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogFunctionAccess().getBaseExpressionParserRuleCall_4_0()); 
	    }
		lv_base_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogFunctionRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLogFunctionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleModFunction
entryRuleModFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModFunctionRule()); }
	 iv_ruleModFunction=ruleModFunction 
	 { $current=$iv_ruleModFunction.current; } 
	 EOF 
;

// Rule ModFunction
ruleModFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mod' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModFunctionAccess().getModKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModFunctionAccess().getDividendExpressionParserRuleCall_2_0()); 
	    }
		lv_dividend_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModFunctionRule());
	        }
       		set(
       			$current, 
       			"dividend",
        		lv_dividend_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModFunctionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModFunctionAccess().getDivisorExpressionParserRuleCall_4_0()); 
	    }
		lv_divisor_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModFunctionRule());
	        }
       		set(
       			$current, 
       			"divisor",
        		lv_divisor_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModFunctionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleCeilFunction
entryRuleCeilFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCeilFunctionRule()); }
	 iv_ruleCeilFunction=ruleCeilFunction 
	 { $current=$iv_ruleCeilFunction.current; } 
	 EOF 
;

// Rule CeilFunction
ruleCeilFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ceil' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCeilFunctionAccess().getCeilKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCeilFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCeilFunctionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCeilFunctionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCeilFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFloorFunction
entryRuleFloorFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloorFunctionRule()); }
	 iv_ruleFloorFunction=ruleFloorFunction 
	 { $current=$iv_ruleFloorFunction.current; } 
	 EOF 
;

// Rule FloorFunction
ruleFloorFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='floor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFloorFunctionAccess().getFloorKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloorFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFloorFunctionAccess().getArgExpressionParserRuleCall_2_0()); 
	    }
		lv_arg_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloorFunctionRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFloorFunctionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRulePowFunction
entryRulePowFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowFunctionRule()); }
	 iv_rulePowFunction=rulePowFunction 
	 { $current=$iv_rulePowFunction.current; } 
	 EOF 
;

// Rule PowFunction
rulePowFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPowFunctionAccess().getPowKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPowFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowFunctionAccess().getBaseExpressionParserRuleCall_2_0()); 
	    }
		lv_base_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowFunctionRule());
	        }
       		set(
       			$current, 
       			"base",
        		lv_base_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPowFunctionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPowFunctionAccess().getExponentExpressionParserRuleCall_4_0()); 
	    }
		lv_exponent_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowFunctionRule());
	        }
       		set(
       			$current, 
       			"exponent",
        		lv_exponent_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPowFunctionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleMaxFunction
entryRuleMaxFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMaxFunctionRule()); }
	 iv_ruleMaxFunction=ruleMaxFunction 
	 { $current=$iv_ruleMaxFunction.current; } 
	 EOF 
;

// Rule MaxFunction
ruleMaxFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='max' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMaxFunctionAccess().getMaxKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMaxFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxFunctionAccess().getArgsExpressionParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxFunctionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMaxFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMaxFunctionAccess().getArgsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_args_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMaxFunctionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMaxFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMinFunction
entryRuleMinFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinFunctionRule()); }
	 iv_ruleMinFunction=ruleMinFunction 
	 { $current=$iv_ruleMinFunction.current; } 
	 EOF 
;

// Rule MinFunction
ruleMinFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='min' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMinFunctionAccess().getMinKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinFunctionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinFunctionAccess().getArgsExpressionParserRuleCall_2_0()); 
	    }
		lv_args_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinFunctionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMinFunctionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinFunctionAccess().getArgsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_args_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinFunctionRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMinFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleTrue
entryRuleTrue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrueRule()); }
	 iv_ruleTrue=ruleTrue 
	 { $current=$iv_ruleTrue.current; } 
	 EOF 
;

// Rule True
ruleTrue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrueAccess().getTrueAction_0(),
            $current);
    }
)	otherlv_1='true' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrueAccess().getTrueKeyword_1());
    }
)
;





// Entry rule entryRuleFalse
entryRuleFalse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFalseRule()); }
	 iv_ruleFalse=ruleFalse 
	 { $current=$iv_ruleFalse.current; } 
	 EOF 
;

// Rule False
ruleFalse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFalseAccess().getFalseAction_0(),
            $current);
    }
)	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFalseAccess().getFalseKeyword_1());
    }
)
;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_reference_0_0=RULE_ID
		{
			newLeafNode(lv_reference_0_0, grammarAccess.getReferenceAccess().getReferenceIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleNumericalValue
entryRuleNumericalValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericalValueRule()); }
	 iv_ruleNumericalValue=ruleNumericalValue 
	 { $current=$iv_ruleNumericalValue.current; } 
	 EOF 
;

// Rule NumericalValue
ruleNumericalValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNumericalValueAccess().getDecimalLiteralParserRuleCall()); 
    }
    this_DecimalLiteral_0=ruleDecimalLiteral
    { 
        $current = $this_DecimalLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalLiteralRule()); }
	 iv_ruleDecimalLiteral=ruleDecimalLiteral 
	 { $current=$iv_ruleDecimalLiteral.current; } 
	 EOF 
;

// Rule DecimalLiteral
ruleDecimalLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDecimalLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDecimalLiteralAccess().getDecimalLiteralIntegerPartAction_1_0(),
            $current);
    }
)(
(
		lv_decimalPart_2_0=RULE_DECIMAL_PART
		{
			newLeafNode(lv_decimalPart_2_0, grammarAccess.getDecimalLiteralAccess().getDecimalPartDECIMAL_PARTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDecimalLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimalPart",
        		lv_decimalPart_2_0, 
        		"org.cmg.ml.sam.xtext.prism.Prism.DECIMAL_PART");
	    }

)
))?)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_integerPart_0_0=RULE_INT
		{
			newLeafNode(lv_integerPart_0_0, grammarAccess.getIntegerLiteralAccess().getIntegerPartINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"integerPart",
        		lv_integerPart_0_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)
;





// Entry rule entryRuleModelType
entryRuleModelType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelTypeRule()); } 
	 iv_ruleModelType=ruleModelType 
	 { $current=$iv_ruleModelType.current.getText(); }  
	 EOF 
;

// Rule ModelType
ruleModelType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_DTMC_0=RULE_DTMC    {
		$current.merge(this_DTMC_0);
    }

    { 
    newLeafNode(this_DTMC_0, grammarAccess.getModelTypeAccess().getDTMCTerminalRuleCall_0()); 
    }

    |    this_MDP_1=RULE_MDP    {
		$current.merge(this_MDP_1);
    }

    { 
    newLeafNode(this_MDP_1, grammarAccess.getModelTypeAccess().getMDPTerminalRuleCall_1()); 
    }

    |    this_CTMC_2=RULE_CTMC    {
		$current.merge(this_CTMC_2);
    }

    { 
    newLeafNode(this_CTMC_2, grammarAccess.getModelTypeAccess().getCTMCTerminalRuleCall_2()); 
    }
)
    ;





// Rule ConstantType
ruleConstantType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='int' 
	{
        $current = grammarAccess.getConstantTypeAccess().getCINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConstantTypeAccess().getCINTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bool' 
	{
        $current = grammarAccess.getConstantTypeAccess().getCBOOLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConstantTypeAccess().getCBOOLEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='double' 
	{
        $current = grammarAccess.getConstantTypeAccess().getCDOUBLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConstantTypeAccess().getCDOUBLEEnumLiteralDeclaration_2()); 
    }
));



// Rule Relations
ruleRelations returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getRelationsAccess().getLSSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationsAccess().getLSSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getRelationsAccess().getLEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationsAccess().getLEQEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='=' 
	{
        $current = grammarAccess.getRelationsAccess().getEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationsAccess().getEQEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='!=' 
	{
        $current = grammarAccess.getRelationsAccess().getNEQEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationsAccess().getNEQEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>' 
	{
        $current = grammarAccess.getRelationsAccess().getGTREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationsAccess().getGTREnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='>=' 
	{
        $current = grammarAccess.getRelationsAccess().getGEQEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationsAccess().getGEQEnumLiteralDeclaration_5()); 
    }
));



RULE_NEXTID : RULE_ID '\'';

RULE_DTMC : ('probabilistic'|'dtmc');

RULE_MDP : ('nondeterminitic'|'mdp');

RULE_CTMC : ('stochastic'|'ctmc');

RULE_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_INTERVAL : '..';

RULE_DECIMAL_PART : '.' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


