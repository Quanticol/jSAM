/*
 * generated by Xtext
 */
package org.cmg.ml.sam.xtext.prism.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.cmg.ml.sam.xtext.prism.services.PrismGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class PrismSyntacticSequencer extends AbstractSyntacticSequencer {

	protected PrismGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_4_0_a;
	protected AbstractElementAlias match_BaseExpression_LeftParenthesisKeyword_4_0_p;
	protected AbstractElementAlias match_BaseModule_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_BaseModule_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_BaseStateFormula_LeftParenthesisKeyword_2_0_a;
	protected AbstractElementAlias match_BaseStateFormula_LeftParenthesisKeyword_2_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (PrismGrammarAccess) access;
		match_BaseExpression_LeftParenthesisKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_BaseExpression_LeftParenthesisKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getBaseExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_BaseModule_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getBaseModuleAccess().getLeftParenthesisKeyword_1_0());
		match_BaseModule_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getBaseModuleAccess().getLeftParenthesisKeyword_1_0());
		match_BaseStateFormula_LeftParenthesisKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getBaseStateFormulaAccess().getLeftParenthesisKeyword_2_0());
		match_BaseStateFormula_LeftParenthesisKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getBaseStateFormulaAccess().getLeftParenthesisKeyword_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getINTERVALRule())
			return getINTERVALToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal INTERVAL:
	 * 	'..'
	 * ;
	 */
	protected String getINTERVALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "..";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BaseExpression_LeftParenthesisKeyword_4_0_a.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseExpression_LeftParenthesisKeyword_4_0_p.equals(syntax))
				emit_BaseExpression_LeftParenthesisKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseModule_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_BaseModule_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseModule_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_BaseModule_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseStateFormula_LeftParenthesisKeyword_2_0_a.equals(syntax))
				emit_BaseStateFormula_LeftParenthesisKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseStateFormula_LeftParenthesisKeyword_2_0_p.equals(syntax))
				emit_BaseStateFormula_LeftParenthesisKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' arg=Negation
	 *     (rule start) (ambiguity) 'ceil' '(' arg=Expression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'floor' '(' arg=Expression
	 *     (rule start) (ambiguity) 'log' '(' argument=Expression
	 *     (rule start) (ambiguity) 'max' '(' args+=Expression
	 *     (rule start) (ambiguity) 'min' '(' args+=Expression
	 *     (rule start) (ambiguity) 'mod' '(' dividend=Expression
	 *     (rule start) (ambiguity) 'pow' '(' base=Expression
	 *     (rule start) (ambiguity) 'true' (rule start)
	 *     (rule start) (ambiguity) integerPart=INT
	 *     (rule start) (ambiguity) reference=ID
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {DecimalLiteral.integerPart=}
	 *     (rule start) (ambiguity) {IfAndOnlyIf.left=}
	 *     (rule start) (ambiguity) {IfThenElse.guard=}
	 *     (rule start) (ambiguity) {Implies.left=}
	 *     (rule start) (ambiguity) {MulExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelExpression.left=}
	 *     (rule start) (ambiguity) {SumExpression.left=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' arg=Negation
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {IfAndOnlyIf.left=}
	 *     (rule start) (ambiguity) {IfThenElse.guard=}
	 *     (rule start) (ambiguity) {Implies.left=}
	 *     (rule start) (ambiguity) {MulExpression.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {RelExpression.left=}
	 *     (rule start) (ambiguity) {SumExpression.left=}
	 */
	protected void emit_BaseExpression_LeftParenthesisKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'system' (ambiguity) module=[Module|ID]
	 *     (rule start) 'system' (ambiguity) {AlphabetisedParallelComposition.left=}
	 *     (rule start) 'system' (ambiguity) {AsynchronousParallelComposition.left=}
	 *     (rule start) 'system' (ambiguity) {Hiding.argument=}
	 *     (rule start) 'system' (ambiguity) {Renaming.argument=}
	 *     (rule start) 'system' (ambiguity) {RestrictedParallelComposition.left=}
	 *     (rule start) (ambiguity) module=[Module|ID]
	 *     (rule start) (ambiguity) {AlphabetisedParallelComposition.left=}
	 *     (rule start) (ambiguity) {AsynchronousParallelComposition.left=}
	 *     (rule start) (ambiguity) {Hiding.argument=}
	 *     (rule start) (ambiguity) {Renaming.argument=}
	 *     (rule start) (ambiguity) {RestrictedParallelComposition.left=}
	 */
	protected void emit_BaseModule_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {AlphabetisedParallelComposition.left=}
	 *     (rule start) (ambiguity) {AsynchronousParallelComposition.left=}
	 *     (rule start) (ambiguity) {Hiding.argument=}
	 *     (rule start) (ambiguity) {Renaming.argument=}
	 *     (rule start) (ambiguity) {RestrictedParallelComposition.left=}
	 */
	protected void emit_BaseModule_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' argument=BaseStateFormula
	 *     (rule start) (ambiguity) '\P' relation=Relations
	 *     (rule start) (ambiguity) '{' exp=Expression
	 *     (rule start) (ambiguity) {StateAnd.left=}
	 *     (rule start) (ambiguity) {StateOr.left=}
	 */
	protected void emit_BaseStateFormula_LeftParenthesisKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {StateAnd.left=}
	 *     (rule start) (ambiguity) {StateOr.left=}
	 */
	protected void emit_BaseStateFormula_LeftParenthesisKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
